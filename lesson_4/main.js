'use strict'
//1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, надо получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 надо получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
/*
function num2Obj(num) {
  let answer = {};
  if (num>999) {
    console.log('Больше максимума');
    return answer;
  }
  if (num>=100) {
    answer['сотни'] = Math.trunc(num / 100);
    num = num % 100;
  }
  if (num>=10) {
    answer['десятки'] = Math.trunc(num / 10);
    num = num % 10;
  }
  if (num>=0) {
    answer['единицы'] = num;
  }
  return answer;
}

let num1 = 245;

console.log(num2Obj(num1));
*/

//2. Продолжить работу с интернет-магазином:
//В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
//Реализуйте такие объекты.
//let item1 = {'Хлеб':17};
//let item2 = {'Вода':5};
//Перенести функционал подсчета корзины на объектно-ориентированную базу.
class Item{
  constructor(name, price){
    this.name = name;
    this.price = price;
  }
}

class Bascket{
  constructor(... items){
    this.mySum = 0;
    for (let variable in items) {
      this.mySum += (items[variable].price);
    }
  }
}

let item3 = new Item ('Хлеб', 10);
let item4 = new Item ('Вода', 17);

let b = new Bascket(item3, item4);
console.log(b.mySum);

//3. * Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.
